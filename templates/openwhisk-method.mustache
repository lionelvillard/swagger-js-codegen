/*$OWACTIONBBEGING$*/
/*{{&methodName}}*/
/**
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
{{#parameters}}
{{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{^required}}[{{/required}}{{&camelCaseName}}{{^required}}]{{/required}} - {{&description}}{{/isSingleton}}
{{/parameters}}
{{#isSecure}} * @param {string} access_token - The oauth access token {{/isSecure}}
 *
 */
var request = require('request-promise-native');

 function main(args) {
   return new Promise((resolve, reject) => {
    var body;
    var queryParameters = {};
    var headers = {};
    var form = {};

    {{#isSecure}}
        if (args.access_token) {
            headers['Authorization'] = 'Token ' + args.access_token;
        } else {
            reject({error: 'Missing authorization.'});
            return;
        }
    {{/isSecure}}

    {{#headers}}
        headers['{{&name}}'] = [{{&value}}];
    {{/headers}}

    {{#parameters}}

        {{#isQueryParameter}}
            {{#isSingleton}}
                queryParameters['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                        if(new RegExp('{{&pattern}}').test(parameterName)){
                            queryParameters[parameterName] = parameters[parameterName];
                        }
                    });
                {{/isPatternType}}
                {{^isPatternType}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}


        {{#isHeaderParameter}}
            {{#isSingleton}}
                headers['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isSingleton}}
        {{/isHeaderParameter}}

        {{#isBodyParameter}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                body = parameters['{{&camelCaseName}}'];
            }
        {{/isBodyParameter}}

         {{#isFormParameter}}
            {{#isSingleton}}
                form['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&camelCaseName}}'] !== undefined){
                    form['{{&name}}'] = parameters['{{&camelCaseName}}'];
                }
            {{/isSingleton}}
        {{/isFormParameter}}

        {{#required}}
        if(parameters['{{&camelCaseName}}'] === undefined) {
            reject({ error: 'Missing required {{&paramType}} parameter: {{&camelCaseName}}'});
            return;
        }
        {{/required}}

        {{#isPathParameter}}
            path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters['{{&camelCaseName}}']);
        {{/isPathParameter}}

    {{/parameters}}

    var req = {
        method: '{{method}}',
        uri: url,
        qs: queryParameters,
        headers: headers,
        body: body
    };
    if(Object.keys(form).length > 0) {
        req.form = form;
    }
    if(typeof(body) === 'object' && !(body instanceof Buffer)) {
        req.json = true;
    }

    request(req, function(error, response, body) {
        if(error) {
            reject({error: error});
        } else {
            if(/^application\/(.*\\+)?json/.test(response.headers['content-type'])) {
                try {
                    body = JSON.parse(body);
                } catch(e) {}
            }
            if(response.statusCode === 204) {
                resolve({ response: response });
            } else if(response.statusCode >= 200 && response.statusCode <= 299) {
                resolve({ response: response, body: body });
            } else {
                reject({ error: response.statusCode, response: response, body: body });
            }
        }
    });});
};

exports.main = main;
